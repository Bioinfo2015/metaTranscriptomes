##comparing CpG across transcriptomes

#------------- FIRST SEP, DOWNLOAD THE TRANSCRIPTOMES ----------
#download nucleotide sequences from variatious sources. See transcriptomeSpreadsheet.xlsx

#Aiptasia from Pringle lab
wget "http://pringlelab.stanford.edu/project%20files/SymTranscriptsClustered_id_99_frac_20_seeds_rereunRev%20(2).fa.gz" #Aiptasia

#Meyer lab transcriptomes
wget "http://meyerlab:coral@files.cgrb.oregonstate.edu/Meyer_Lab/transcriptomes/MaurN/Maur_transcriptome_v1.fasta.gz" #Madracis auretenra
wget "http://meyerlab:coral@files.cgrb.oregonstate.edu/Meyer_Lab/transcriptomes/DstrN/Pstr_transcriptome_v1.fasta.gz" #Pseudodiploria strigosa
wget "http://meyerlab:coral@files.cgrb.oregonstate.edu/Meyer_Lab/transcriptomes/Fscu/Fscu_transcriptome_v1.fasta.gz" #Fungia scutaria
wget "http://meyerlab:coral@files.cgrb.oregonstate.edu/Meyer_Lab/transcriptomes/Shys/Shys_transcriptome_v1.fasta.gz" #Seriatopora hystrix
wget "http://meyerlab:coral@files.cgrb.oregonstate.edu/Meyer_Lab/transcriptomes/Mcav/Mcav_transcriptome_v1.fasta.gz" #Montastaea cavernosa
wget "http://meyerlab:coral@files.cgrb.oregonstate.edu/Meyer_Lab/transcriptomes/Aele/Aele_transcriptome_v1.fasta.gz" #Anthopleura elegantissima

#Matz lab transcriptomes
wget "https://dl.dropboxusercontent.com/u/37523721/amillepora_transcriptome_july2014.zip" #Acropora millepora (by Moya)
wget "https://dl.dropboxusercontent.com/u/37523721/ahyacinthus_transcriptome_july2014.zip" #Acropora hyacinthus
wget "https://dl.dropboxusercontent.com/u/37523721/pastreoides_transcriptome_july2014.zip" #Porites asteoides
wget "https://dl.dropboxusercontent.com/u/37523721/atenuis_transcriptome_july2014.zip" #Acropora tenuis

#OIST Marine Genomics Unit
wget "http://marinegenomics.oist.jp/genomes/download/adi_transcriptome_assembly.v1.fa.gz" #Acropora digitifera transcriptome
wget "http://marinegenomics.oist.jp/genomes/download/adi_v1.0.1.prot.fa.gz" #Acropora digitifera proteome

#Cnidarian Database
wget "http://data.centrescientifique.mc/Data/454Isotigs.fas.zip" #Stylophora pistillata (Karako-Lampert et al. Plos One 2014)

#PocilloporaBase
wget "http://cnidarians.bu.edu/PocilloporaBase/cgi-bin/blast/contigs.fan" #Pocillopora damicornis

#Baums Lab
#this one needs some fixing, so do some followup adjustments
wget "https://usegalaxy.org/datasets/cb51c4a06d7ae94e/display?to_ext=fasta" #Acropora palmata (Polato et al. 2011)
sed 's/"//' Apalmata.fa > Apalmata__.fa ##get rid of some quotation marks that are in there for some random reason
capitalize_fasta.py -fa Apalmata__.fa > Apalmata.fa ##make all the letter capitalized also
rm Apalmata__.fa #get rid of the intermediate file


#PcarnBase
wget "http://www.comp.hkbu.edu.hk/~db/PcarnBase/db/nucleotide/CoralDNA" #Platygyra carnosus (Sun et al 2013) Couldn't get this one to work anymore

#Siderastrea Siderea transcriptome from Sarah Davies was personally transfered

# getting uniprot database
echo "wget ftp://ftp.uniprot.org/pub/databases/uniprot/uniref/uniref50/uniref50.fasta.gz" >getuni 
GDlauncher_creator.py -j getuni -n unipr -l uu -q normal -t 4:00:00 -a tagmap
qsub uu

# getting GO annotations
echo "wget ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/idmapping_selected.tab.gz" >getgo
GDlauncher_creator.py -j getgo -n getgo -l gg -q normal -t 4:00:00 -a tagmap
qsub gg

# unzipping
gunzip uniref50.fasta.gz &
gunzip idmapping_selected.tab.gz &

#download the N.vectensis and A.digitifera protein sequence references

#BUILD JOINT CNIDARIAN DATABASE FROM  N.vectensis and A.digitifera PROTEOMES

wget "ftp://ftp.jgi-psf.org/pub/JGI_data/Nematostella_vectensis/v1.0/annotation/transcripts.Nemve1FilteredModels1.fasta.gz" #Nematostella transcriptome
wget "ftp://ftp.jgi-psf.org/pub/JGI_data/Nematostella_vectensis/v1.0/annotation/proteins.Nemve1FilteredModels1.fasta.gz" #Nematostella protein sequences
cat /work/02260/grovesd/digitifera/proteome/Acropora_digitifera_peptides_100.final.clstr.faa /work/02260/grovesd/Nvectensis_references/Nvectensis_protSeqs.fasta > cnidarianProteinDB.fasta

# indexing the fasta database
module load blast
echo "makeblastdb -in cnidarianProteinDB.fasta -dbtype prot" >mdb
GDlauncher_creator.py -j mdb -n mdb -l mmm -a tagmap
qsub mmm

#set up a variable for the pathway to the uniprot files
UNIPROT="/work/02260/grovesd/uniprot_files/mishaAnnotations/uniref50.fasta"
CIDARIANDB="/work/02260/grovesd/Nvectensis_references/cnidarianProteinDB.fasta"

#SHOULD CHANGE SUFFIX TO FAS TO FIT MISHA'S OUTPUT

#blast against the Cnidarian (dig + Nemato) database--since this is a small db you can just run them all at once
for file in $(ls *.fa); do echo blastx -query $file -db $CIDARIANDB -evalue 1e-5 -num_threads 12 -num_descriptions 5 -num_alignments 5 -out ${file/.fa/}.br >> doblast; done
GDlauncher_creator.py -j doblast -n doblast -l doblast.job -a tagmap -q normal -t 24:00:00 
qsub doblast.job

#run CDS extractor for each transcriptome
#note this doesn't seem to like overwriting files, so remove them if you are running multiple times.
module load bioperl
>extract; for s in `cat speciesList.txt`; do echo "CDS_extractor_v2.pl $s.fa $s.br" >> extract ; done
GDlauncher_creator.py -j extract -n extract -l extract0.job -a tagmap
cat extract0.job | perl -pe 's/12way .+$/12way 24/' > extract.job ; rm extract0.job
qsub extract.job

##see if you got back sequences for all of them
ll *CDS.fas | wc -l

######## GETTING CPG DATA #########

##extract CpG data from a subset of the coding regions
> getcpg; for s in `cat speciesList.txt`; do echo getCpGoe.py -i $s\_CDS.fas -sub 1000 -o $s\CpG.txt >> getcpg; done
GDlauncher_creator.py -j getcpg -n getcpg -l getcpg.job -a tagmap -c 12
qsub getcpg.job

##scp them to Mac for R work
##build a new species list in case some have dropped
>speciesList.txt; for file in $(ls *CpG.txt); do echo ${file/CpG.txt/} >> speciesList.txt; done
##========================================================================================================================

##--------------- GETTING ORTHOLOGS -----------------------------------

#GET THE DIGITIFERA PROTEOME
#A.digitifera
wget "http://marinegenomics.oist.jp/genomes/download/adi_v1.0.1.prot.fa.gz" #Acropora digitifera proteome
gunzip adi_v1.0.1.prot.fa.gz
mv adi_v1.0.1.prot.fa Adigitifera_REF.fas

#make blast databases from each fasta file
module load blast
> makeDBs; for file in $(ls *.fas); do  echo makeblastdb -in $file -dbtype prot >> makeDBs; done
GDlauncher_creator.py -j makeDBs -n makeDBs -l makeDBs.job -e grovesdixon@gmail.com -a tagmap -c 12
qsub makeDBs.job


#blast each set of extracted protein sequence to the REF databases and do the reciprocal blast
#set up the command file
>blastps
for file in $(ls *PRO.fas); do 
echo "blastp -query $file -db Adigitifera_REF.fas -evalue 1e-5 -num_threads 12 -num_alignments 1 -outfmt 5 -out ${file/_PRO.fas/_2_Adigitifera_REF.br}" >> blastps;
echo "blastp -query Adigitifera_REF.fas -db $file -evalue 1e-5 -num_threads 12 -num_alignments 1 -outfmt 5 -out Adigitifera_REF_2_${file/_PRO.fas/.br}" >> blastps;
done

#launch the job
GDlauncher_creator.py -n blastps -j blastps -l blastps.job -q normal -a tagmap -t 10:00:00 -c 48
qsub blastps.job

##pool all orthologs at once
E="1e-30"
HP="80"
>getOrthos; for file in $(ls *PRO.fas); do echo get_reciprocal_orthos.py -br1 Adigitifera_REF_2_${file/_PRO.fas}.br -br2 ${file/_PRO.fas/}_2_Adigitifera_REF.br -fa2 $file -fa1 Adigitifera_REF.fas -o ./Adigitifera-REF_${file/_PRO.fas/}_orthos.txt -e $E -hp $HP >> getOrthos; done
GDlauncher_creator.py -n getOrthos -j getOrthos -l getOrthos.job
qsub getOrthos.job

#merge them into a table

orthotable="Adigitifera_Ortholog_Table_e5_hp50_c4.txt"

mergeReciprocalOrthos.py -f Adigitifera*orthos.txt -c .4 -o $orthotable -r AdigitiferaREF
#-c argument specifies the proportion of species that must have an ortholog to include it in the table
##========================================================================================================================

#-------------------- MAKE ALIGNMENTS OF ORTHOLOGS ------------------------------------
#first output fasta files for each gene in the ortholog table by pulling the sequences from each species fasta file
echo output_ortholog_seqs.py -prot *PRO.fas -nucl *CDS.fas -orthos $orthotable > orthoOuter
GDlauncher_creator.py -j orthoOuter -n orthoOuter -l orthoOuter.job -q development -c 12
qsub orthoOuter.job

#use mafft to make the alignments. 
#NOTE THAT THIS DOESN'T RUN WHEN YOU DO IT THROUGH A JOB. I GOT IT TO WORK BY RUNNING ON FRONT NODES.
module load mafft
for fa in $(ls *prot.fasta); do mafft --auto --maxiterate 1000 $fa > ${fa/.fasta/}.aln; done

##use pal2nal to reverse translate the protein sequences to codon sequences based on the CDS files
for aln in $(ls *.aln); do pal2nal.pl $aln ${aln/prot.aln/}nuc.fasta -output paml -nogap > ${aln/_prot.aln/}.codon; done
GDlauncher_creator.py -n reverseTrans -j reverseTrans -l reverseTrans.job -c 12
qsub reverseTrans.job 

#now concatenate the sequences into a nexus file
concatenate_genes_for_beast.py -spp speciesList.txt -f *.codon -o seqs.nex
##========================================================================================================================

#-------------------- USE RAXML TO BULID TREE ------------------------------------
module load raxml

#convert a nexus file to phylip
nex2phy.py -i seqs_213_12-11-14_e30_hp80_75.nex


#set up file name variables for running raxML
S="seqs_213_12-11-14_e30_hp80_75.phy"
Q="seqs_213_12-11-14_e30_hp80_75_partitions.txt"
R="T1"
N="1000"

#run RaXml to get initial best tree
echo "raxmlHPC-PTHREADS-SSE3 -s $S -n $R -m GTRGAMMA -T 12 -p 12345 -q $Q -N $N" > buildTree
GDlauncher_creator.py -n buildTree -j buildTree -l buildTree.job -q normal -t 24:00:00
qsub buildTree.job

#look at best tree
cat RAxML_bestTree.run2

#run bootstrap
R="T2"
echo "raxmlHPC-PTHREADS-SSE3 -s $S -n $R -m GTRGAMMA -q $Q -T 12 -p 12345 -b 12345 -N 1000" > boot
GDlauncher_creator.py -n boot -j boot -l boot.job -q normal -t 24:00:00
qsub boot.job

#draw the bootstrap values on the best tree
raxmlHPC-PTHREADS-SSE3 -m GTRCAT -n boot4 -p 12345 -f b -t RAxML_bestTree.run2 -z RAxML_bootstrap.run2boot

#look at bootstraps
cat 

#build a concensus tree
raxmlHPC-PTHREADS-SSE3 -m GTRCAT -J MR -z RAxML_bootstrap.run2boot -n T1 -T 12
##========================================================================================================================

#-------------------- USE PAML TO LOOK FOR dN/dS rates ------------------------------------
#before we pulled orthologs fairly stictly in order to build our tree.
#now we will relax ortholog calls to get a more "omic" dataset
#so first we need a new relaxed ortholog table
#return to directory where you pulled orthologs before
##pool all orthologs with relaxed stringency
E="1e-5"
HP="50"
>getOrthos; for file in $(ls *PRO.fas); do echo get_reciprocal_orthos.py -br1 Adigitifera_REF_2_${file/_PRO.fas}.br -br2 ${file/_PRO.fas/}_2_Adigitifera_REF.br -fa2 $file -fa1 Adigitifera_REF.fas -o ./Adigitifera-REF_${file/_PRO.fas/}_orthos.txt -e $E -hp $HP >> getOrthos; done
GDlauncher_creator.py -n getOrthos -j getOrthos -l getOrthos.job
qsub getOrthos.job

#merge them into a table
#-c argument specifies the proportion of species that must have an ortholog to include it in the table
orthotable="Adigitifera_Ortholog_Table_e5_hp50_c3.txt"
mergeReciprocalOrthos.py -f Adigitifera*orthos.txt -c .3 -o $orthotable -r AdigitiferaREF

#pull the sequences from the fasta files
#this gets a little messy with thousands of files, so I'd make a new directory and copy the CDS.fas and PRO.fas files into it
echo output_ortholog_seqs.py -prot *PRO.fas -nucl *CDS.fas -orthos $orthotable > orthoOuter
GDlauncher_creator.py -j orthoOuter -n orthoOuter -l orthoOuter.job -q development -c 12
qsub orthoOuter.job

#see that you exported sequences for all orthologs
cat *prot.fasta | wc -l

#



##use pal2nal to reverse translate the protein sequences to codon sequences based on the CDS files
>reverseTrans; for aln in $(ls *.aln); do echo "pal2nal.pl $aln ${aln/prot.aln/}nuc.fasta -output paml -nogap > ${aln/_prot.aln/}.codon" >> reverseTrans; done
GDlauncher_creator.py -n reverseTrans -j reverseTrans -l reverseTrans.job -c 12
qsub reverseTrans.job 























